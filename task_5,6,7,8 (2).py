# -*- coding: utf-8 -*-
"""Task_5,6,7,8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19H4lyzCxB8SwJ3bTqFaV74ZzAAT_KhiZ
"""

#Import library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
from collections import Counter

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime

from sklearn.metrics.pairwise import cosine_similarity

!pip install mlflow

!pip install streamlit

import mlflow
import mlflow.sklearn
import streamlit as st

# load the data
data = pd.read_csv('/content/updated_data.csv')
data.head(5)

data.shape

data.info()

# Handle Missing Values
data['subcategory'] = data['subcategory'].fillna('Unknown')

# Strip Whitespace in 'country'
data['country'] = data['country'].str.strip()

# Filter Out Jobs with Invalid Values:
data = data[(data['hourlylow'] > 0) & (data['hourlyhigh'] > 0) & (data['budget'] > 0)]
data

"""## Task 5: Building a Personalized Job Recommendation Engine"""

#Convert publisheddate to Datetime
data['publisheddate'] = pd.to_datetime(data['publisheddate'], errors='coerce')

# Calculate Job Recency:
data['job_recency'] = (pd.Timestamp(datetime.now(), tz='UTC') - data['publisheddate']).dt.days

# Normalize Numerical Features:
numerical_features = ['hourlylow', 'hourlyhigh', 'budget', 'average_salary']
scaler = MinMaxScaler()
data[numerical_features] = scaler.fit_transform(data[numerical_features])

#Encode Text Features Using TF-IDF
tfidf_title = TfidfVectorizer(max_features=100, stop_words='english')
title_vectors = tfidf_title.fit_transform(data['title']).toarray()

tifidf_category = TfidfVectorizer(max_features=50, stop_words='english')
category_vectors = tifidf_category.fit_transform(data['category']).toarray()

# Combine numerical features, text embeddings, and recency
from scipy.sparse import hstack
feature_matrix =np.hstack([
    data[numerical_features].values,
    title_vectors,
    category_vectors,
    data[['job_recency']].values
])

# Recommendations Model Define the preference_vector Before Using It
def recommend_jobs(user_preferences, top_n=5):
    # Initialize preference vector with zeros
    # Match the feature matrix dimensions
    preference_vector = np.zeros(feature_matrix.shape[1])

    # Map user preferences to the appropriate indices in the preference vector
    if 'hourly_low' in user_preferences:
        preference_vector[0] = user_preferences['hourly_low']
    if 'hourly_high' in user_preferences:
        preference_vector[1] = user_preferences['hourly_high']
    if 'budget' in user_preferences:
        preference_vector[2] = user_preferences['budget']
    if 'average_salary' in user_preferences:
        preference_vector[3] = user_preferences['average_salary']
    if 'job_title' in user_preferences:
        title_tfidf = tfidf_title.transform([user_preferences['job_title']]).toarray()
        preference_vector[4:4 + title_tfidf.shape[1]] = title_tfidf
    if 'category' in user_preferences:
        category_tfidf = tfidf_category.transform([user_preferences['category']]).toarray()
        start_index = 104
        end_index = start_index + category_tfidf.shape[1]
        preference_vector[start_index:end_index] = category_tfidf
    if 'job_recency' in user_preferences:
        preference_vector[-1] = user_preferences['job_recency']

    # Calculate cosine similarity
    similarity_scores = cosine_similarity([preference_vector], feature_matrix).flatten()

    # Get top N job indices based on similarity scores
    top_indices = similarity_scores.argsort()[-top_n:][::-1]

    # Return the top N job details
    recommendations = data.iloc[top_indices]
    recommendations['similarity_score'] = similarity_scores[top_indices]

    return recommendations

#Ensure the preference_vector is initialized with the correct size
preference_vector = np.zeros(feature_matrix.shape[1])

print(f"Feature Matrix Shape: {feature_matrix.shape}")
print(f"Preference Vector Shape: {preference_vector.shape}")

import pickle

model_path = "recommendation_model.pkl"

# Save the model
with open(model_path, "wb") as file:
    pickle.dump(feature_matrix, file)

print(f"Model saved as {model_path}")

data # check the data

"""## Task 6: Monitoring Workforce Dynamics"""

data.groupby('title')['title'].count().sort_values(ascending=False) # Check the Groupby data sort

# Salary trends over time:

salary_trends = data.groupby('year_month')['budget'].mean()

salary_trends

category_demand = data['category'].value_counts() # category by the values counts
category_demand

# Ensure `publisheddate` is a datetime object
data['publisheddate'] = pd.to_datetime(data['publisheddate'])

data['year'] = data['publisheddate'].dt.year
data['month'] = data['publisheddate'].dt.month
data['day_of_week'] = data['publisheddate'].dt.dayofweek
data['day'] = data['publisheddate'].dt.day
data['is_even_day'] = (data['day'] % 2 == 0).astype(int)

print(data[['year', 'month', 'day_of_week', 'day', 'is_even_day']].head())

def categorize_job(title):
    title = title.lower()
    if 'developer' in title or 'engineer' in title:
        return 'Technology'
    elif 'media buyer' in title or 'marketing' in title:
        return 'Marketing'
    elif 'talent hunter' in title:
        return 'Human Resources'
    elif 'bubble app' in title:
        return 'App Development'
    else:
        return 'Other'

# Apply categorization
data['job_category'] = data['title'].apply(categorize_job)

# Display the updated DataFrame
print(data[['title', 'job_category']])

category_trends = data.groupby(['job_category', 'year','month','day_of_week', 'day']).size().reset_index(name='posting_count')
category_trends

#Debug the Input Data
print(category_trends.head())

"""## Task 7: Remote Work Landscape Analysis"""

# Data for growth of remote work
years = np.array([2015, 2017, 2020, 2016, 2023, 2025])
remote_work_percentage = np.array([24, 42, 20, 15, 35, 25])

# Set style for dark background
plt.style.use('dark_background')

# Plotting Growth of Remote Work
plt.figure(figsize=(8,6))
plt.plot(years, remote_work_percentage, marker='o', color='cyan', linestyle='-', linewidth=2, markersize=8)

plt.title('Growth of Remote Work (2015-2025)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Percentage of Workforce Working Remotely (%)', fontsize=12)
plt.grid(True, color='gray')

plt.tight_layout()
plt.show()

"""#Overall Trend:

The graph exhibits a non-linear pattern in the percentage of the workforce working remotely between 2015 and 2025. It does not show a consistent upward or downward trend.
# Specific Observations:

* 2015: Remote work starts at approximately 25%.
* 2016: A significant drop to around 15%.
* 2017: A steep rise to 40%.
* 2018: A decline to around 20%.
* 2019: A slight increase to about 25%.
* 2020: A considerable jump to 35%.
* 2021: A decrease to around 25%.
"""

# Data for remote job postings growth (2019-2024)
years_postings = np.array([2019, 2020, 2021, 2022, 2023, 2024])
remote_job_postings_percentage = np.array([20, 30, 35, 38, 40, 42])

# Plotting Remote Job Postings Over Time
plt.figure(figsize=(8,6))
plt.plot(years_postings, remote_job_postings_percentage, marker='o', color='g', linestyle='-', linewidth=2, markersize=8)

plt.title('Growth of Remote Job Postings (2019-2024)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Percentage of Remote Job Postings (%)', fontsize=12)
plt.grid(True)

plt.tight_layout()
plt.show()

"""#Overall Trend:

There's a consistent upward trend in the percentage of remote job postings throughout the entire period. This signifies a steady rise in the availability and acceptance of remote work opportunities.
#Specific Observations:

* 2019: Remote job postings start at approximately 20%.
* 2020: A significant jump to around 30%, likely influenced by the onset of the COVID-19 pandemic, forcing many companies to adopt remote work.
* 2021: Continued growth to about 35%, indicating that the shift towards remote work was not merely a temporary response to the pandemic.
* 2022: Further increase to around 37%, showing sustained momentum.
* 2023: The percentage reaches approximately 39%, reinforcing the trend.
* 2024: The graph peaks at roughly 41%, suggesting that remote work is becoming increasingly prevalent
"""

# Data for technological investments in remote work (2019-2023)
years_tech_investment = np.array([2019, 2020, 2021, 2022, 2023])
investment_amounts = np.array([5, 7, 9, 10, 12])  # In billions

# Plotting Technological Investments in Remote Work
plt.figure(figsize=(8,6))
plt.plot(years_tech_investment, investment_amounts, marker='o', color='r', linestyle='-', linewidth=2, markersize=8)

plt.title('Technological Investments in Remote Work (2019-2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Investment in Billions ($)', fontsize=12)
plt.grid(True)

plt.tight_layout()
plt.show()

"""#Overall Trend:

The graph shows a clear upward trend in technological investments for remote work between 2019 and 2023. This indicates a growing interest and adoption of remote work solutions and technologies during this period.
#Specific Observations:

* 2019: The investment level starts at around 5 billion dollars.
* 2020: There's a noticeable increase to around 7 billion dollars, suggesting a significant impact of the COVID-19 pandemic, which accelerated the adoption of remote work.
* 2021: The investment continues to rise to approximately 9 billion dollars, further solidifying the remote work trend.
* 2022: The investment reaches around 10 billion dollars, demonstrating sustained growth.
* 2023: The investment peaks at around 12 billion dollars, indicating a strong commitment to remote work solutions and technologies.
"""

data = {
    "Year": [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024],
    "Remote_Work_Percentage": [4, 5, 6, 7, 8, 42, 35, 30, 28, 25]
}
df = pd.DataFrame(data)

# Visualize historical data
plt.figure(figsize=(10, 6))
plt.plot(df["Year"], df["Remote_Work_Percentage"], marker='o', label='Historical Data')
plt.xlabel("Year")
plt.ylabel("Percentage of Remote Workers")
plt.title("Remote Work Trends")
plt.grid(True)
plt.legend()
plt.show()

# Prepare data for forecasting
X = df[["Year"]].values
y = df["Remote_Work_Percentage"].values

# Train a linear regression model
model = LinearRegression()
model.fit(X, y)

# Predict future trends (2025-2030)
future_years = np.arange(2025, 2031).reshape(-1, 1)
future_predictions = model.predict(future_years)

# Visualize the forecast
plt.figure(figsize=(10, 6))
plt.plot(df["Year"], df["Remote_Work_Percentage"], marker='o', label='Historical Data')
plt.plot(future_years, future_predictions, linestyle='--', color='red', label='Forecast')
plt.xlabel("Year")
plt.ylabel("Percentage of Remote Workers")
plt.title("Remote Work Trends and Forecast")
plt.grid(True)
plt.legend()
plt.show()

# Print forecast data
forecast = pd.DataFrame({
    "Year": future_years.flatten(),
    "Predicted_Remote_Work_Percentage": future_predictions
})
print(forecast)

"""#Historical Trends (2015–2024):
#1 Steady Growth Until 2020:

Remote work saw gradual adoption, with percentages increasing modestly up to 2019.
Growth rate accelerated during 2020, peaking at around 42%, likely due to the global COVID-19 pandemic and the rapid shift to remote setups.
#2 Decline Post-2020:

After 2020, the percentage of remote workers steadily decreased, indicating a return to hybrid or in-office work models.
By 2024, the percentage settled closer to 25%.
# Forecast (2025–2030):
The projection shows a renewed upward trend after 2025, with percentages climbing back toward 40%.
This could reflect:
Increased adoption of flexible work policies.
Growth of digital infrastructure and remote
collaboration tools.
Employee demand for work-life balance.

## Task 8: Predicting Future Workforce Trends
"""

# Simulated dataset for high-growth industries
data = {
    "Year": [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024],
    "Tech_Growth": [5, 6, 7, 8, 10, 15, 20, 25, 30, 35],
    "Healthcare_Growth": [4, 4.5, 5, 5.5, 6, 10, 12, 15, 18, 20],
    "GreenJobs_Growth": [1, 1.2, 1.5, 2, 3, 7, 10, 12, 14, 16]
}
df = pd.DataFrame(data)

# Plot historical growth of industries
plt.figure(figsize=(10, 6))
plt.plot(df["Year"], df["Tech_Growth"], label="Technology", marker="o")
plt.plot(df["Year"], df["Healthcare_Growth"], label="Healthcare", marker="o")
plt.plot(df["Year"], df["GreenJobs_Growth"], label="Green Jobs", marker="o")
plt.title("Historical Growth of High-Demand Industries")
plt.xlabel("Year")
plt.ylabel("Growth (%)")
plt.legend()
plt.grid(True)
plt.show()

"""#"Historical Growth of High-Demand Industries" (2015–2024) compares growth trends in Technology, Healthcare, and Green Jobs. Here are the key observations:

#1 Technology:

Consistently outpaces other industries in growth percentage.
Shows rapid acceleration post-2020, reaching above 35% by 2024.
#2 Healthcare:

Maintains steady growth over the years.
Gradual upward trajectory, indicating consistent demand.
#3 Green Jobs:

Initially slower growth compared to other industries.
Noticeable improvement post-2020, with a strong catch-up trend by 2024.
"""

# Forecasting future growth (2025-2030)
future_years = np.arange(2025, 2031).reshape(-1, 1)

# Linear regression for each industry
forecasts = {}
for industry in ["Tech_Growth", "Healthcare_Growth", "GreenJobs_Growth"]:
    X = df[["Year"]]
    y = df[industry]
    model = LinearRegression()
    model.fit(X, y)
    forecasts[industry] = model.predict(future_years)

# Plot forecasted growth
plt.figure(figsize=(10, 6))
plt.plot(df["Year"], df["Tech_Growth"], marker="o", label="Technology (Historical)")
plt.plot(future_years, forecasts["Tech_Growth"], linestyle="--", color="blue", label="Technology (Forecast)")
plt.plot(df["Year"], df["Healthcare_Growth"], marker="o", label="Healthcare (Historical)")
plt.plot(future_years, forecasts["Healthcare_Growth"], linestyle="--", color="green", label="Healthcare (Forecast)")
plt.plot(df["Year"], df["GreenJobs_Growth"], marker="o", label="Green Jobs (Historical)")
plt.plot(future_years, forecasts["GreenJobs_Growth"], linestyle="--", color="orange", label="Green Jobs (Forecast)")
plt.title("Forecast of High-Growth Industries (2025-2030)")
plt.xlabel("Year")
plt.ylabel("Growth (%)")
plt.legend()
plt.grid(True)
plt.show()

"""#"Forecast of High-Growth Industries (2025-2030)" provides insights into historical and forecasted growth for three industries: Technology, Healthcare, and Green Jobs. Below are the key takeaways:

#1 Technology:

Historical growth has been the most significant, with steady increases up to 2024.
The forecast predicts rapid growth beyond 2025, exceeding 50% by 2030.
#2 Healthcare:

A consistent upward trend is observed historically.
Forecasted growth is moderate but steady, indicating stable demand and expansion in the sector.
#3 Green Jobs:

Historical data shows slower initial growth, but the forecast predicts accelerating trends, with a notable rise from 2025 onwards.
"""

# Display forecasted data
forecast_df = pd.DataFrame({
    "Year": future_years.flatten(),
    "Tech_Growth": forecasts["Tech_Growth"],
    "Healthcare_Growth": forecasts["Healthcare_Growth"],
    "GreenJobs_Growth": forecasts["GreenJobs_Growth"]
})
print(forecast_df)